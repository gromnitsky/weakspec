// Generated by CoffeeScript 1.3.3
(function() {
  var Pref, drw, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  drw = (typeof require === "function" ? require('./drawer') : void 0) || root;

  root.ParseError = (function(_super) {

    __extends(ParseError, _super);

    function ParseError(msg) {
      try {
        Error.captureStackTrace(this, this.constructor);
      } catch (e) {

      }
      this.name = this.constructor.name;
      this.message = "parser: " + msg;
    }

    return ParseError;

  })(Error);

  root.PrefError = (function(_super) {

    __extends(PrefError, _super);

    function PrefError(group, prefName, msg) {
      try {
        Error.captureStackTrace(this, this.constructor);
      } catch (e) {

      }
      this.name = this.constructor.name;
      this.message = "parser: group '" + group + "': pref '" + prefName + "': " + msg;
    }

    return PrefError;

  })(root.ParseError);

  root.WeakSpec = (function() {

    function WeakSpec(spec) {
      var group, name, opts, _ref;
      this.spec = spec;
      if (this.size() < 1) {
        throw new root.ParseError('the spec must contain at least 1 group');
      }
      _ref = this.spec;
      for (group in _ref) {
        opts = _ref[group];
        for (name in opts) {
          this.validateSpecPref(group, name);
        }
      }
      this.drw = new drw.Drawer(this.spec);
    }

    WeakSpec.prototype.size = function() {
      return (Object.keys(this.spec)).length;
    };

    WeakSpec.prototype.validateSpecPref = function(group, name) {
      var instr;
      instr = this.spec[group][name];
      if (!instr.type) {
        throw new root.PrefError(group, name, "no type");
      }
      this._validateUid(group, name);
      return (new (this._mapping(instr.type))(group, name, instr)).validateSpec();
    };

    WeakSpec.prototype._mapping = function(type) {
      return {
        'string': root.PrefStr,
        'number': root.PrefNumber,
        'list': root.PrefList,
        'bool': root.PrefBool,
        'text': root.PrefText,
        'color': root.PrefColor,
        'email': root.PrefEmail,
        'datetime': root.PrefDatetime,
        'date': root.PrefDate,
        'week': root.PrefWeek,
        'time': root.PrefTime
      }[type] || (function() {
        throw new root.ParseError("no method for '" + type + "' type");
      })();
    };

    WeakSpec.prototype._validateUid = function(group, name) {
      if (group.indexOf('|') !== -1) {
        throw new root.ParseError("group: invalud value '" + group + "'");
      }
      if (name.indexOf('|') !== -1) {
        throw new root.ParseError("group: '" + group + "': name: invalud value '" + name + "'");
      }
    };

    WeakSpec.prototype.validate = function(group, name, value) {
      var type, _ref, _ref1;
      type = (_ref = this.spec[group]) != null ? (_ref1 = _ref[name]) != null ? _ref1.type : void 0 : void 0;
      if (!type) {
        throw new Error("no type for " + group + "->" + name);
      }
      return (new (this._mapping(type))(group, name, this.spec[group][name])).validate(value);
    };

    WeakSpec.prototype.toDomElements = function() {
      return this.drw.tree();
    };

    return WeakSpec;

  })();

  Pref = (function() {

    function Pref(group, name, instr) {
      var _this = this;
      this.group = group;
      this.name = name;
      this.instr = instr;
      if (!(this.group && this.name && this.instr)) {
        throw new root.ParseError("no group or name or instructions");
      }
      this.req = {
        'desc': function(val) {
          return _this.isStr(val);
        },
        'type': null
      };
      this.local = [
        {
          'help': null
        }, {
          'validationCallback': null
        }
      ];
    }

    Pref.prototype._localFind = function(opt) {
      var cb, idx, _i, _len, _ref;
      _ref = this.local;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        idx = _ref[_i];
        cb = (Object.keys(idx))[0];
        if (cb === opt) {
          return idx[cb];
        }
      }
      return void 0;
    };

    Pref.prototype.validateSpec = function() {
      var callback, idx, k, option, _i, _len, _ref, _ref1, _results;
      if ((_ref = this.instr['default']) === null || _ref === (void 0)) {
        throw new root.PrefError(this.group, this.name, "'default' cannot be null or missing");
      }
      for (k in this.req) {
        if (this.instr[k] === void 0) {
          throw new root.PrefError(this.group, this.name, "missing '" + k + "'");
        }
        if (this.req[k] && !this.req[k](this.instr[k])) {
          throw new root.PrefError(this.group, this.name, "invalid value in '" + k + "'");
        }
      }
      for (k in this.instr) {
        if (!(this.req[k] === void 0)) {
          continue;
        }
        callback = this._localFind(k);
        if (callback === void 0) {
          throw new root.PrefError(this.group, this.name, "'" + k + "' is unknown");
        }
      }
      if (this.isValidationcallback(this.instr.validationCallback)) {
        return this.instr.validationCallback.call(this, this.instr["default"]);
      }
      _ref1 = this.local;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        idx = _ref1[_i];
        option = (Object.keys(idx))[0];
        callback = idx[option];
        if (this.instr[option] === void 0 && callback !== null) {
          throw new root.PrefError(this.group, this.name, "'" + option + "' is required (set if to null if you don't care)");
        }
        if (callback && this.instr[option] !== null && !callback(this.instr[option])) {
          throw new root.PrefError(this.group, this.name, "invalid value in '" + option + "'");
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Pref.prototype.isValidationcallback = function(t) {
      return typeof t === 'function';
    };

    Pref.prototype.isStr = function(t) {
      if (typeof t !== 'string') {
        return false;
      }
      return !t.match(/^\s*$/);
    };

    Pref.prototype.isRegexp = function(t) {
      if (typeof t !== 'string') {
        return false;
      }
      try {
        new RegExp(t);
      } catch (error) {
        return false;
      }
      return true;
    };

    Pref.prototype.isBoolean = function(t) {
      return typeof t === 'boolean';
    };

    Pref.prototype.isArray = function(t) {
      return t instanceof Array;
    };

    Pref.prototype.isRange = function(t) {
      var idx, _i, _len;
      if (!this.isArray(t)) {
        return false;
      }
      if (t.length !== 2) {
        return false;
      }
      for (_i = 0, _len = t.length; _i < _len; _i++) {
        idx = t[_i];
        if (typeof idx !== 'number') {
          return false;
        }
      }
      if (t[0] > t[1]) {
        return false;
      }
      return true;
    };

    Pref.prototype.inRange = function(range, t) {
      var max, min;
      if (!range) {
        return true;
      }
      min = range[0], max = range[1];
      return t >= min && t <= max;
    };

    Pref.prototype.validate = function(value) {
      if (this.isValidationcallback(this.instr.validationCallback)) {
        return this.instr.validationCallback.call(this, value);
      }
      return this._localFind('default')(value);
    };

    return Pref;

  })();

  root.PrefStr = (function(_super) {

    __extends(PrefStr, _super);

    function PrefStr(group, name, instr) {
      var _this = this;
      this.group = group;
      this.name = name;
      this.instr = instr;
      PrefStr.__super__.constructor.call(this, this.group, this.name, this.instr);
      this.local.push({
        'validationRegexp': function(val) {
          return _this.isRegexp(val);
        }
      });
      this.local.push({
        'allowEmpty': function(val) {
          return _this.isBoolean(val);
        }
      });
      this.local.push({
        'default': function(val) {
          if (typeof val !== 'string') {
            return false;
          }
          if (val === '') {
            return _this.instr.allowEmpty;
          }
          if (_this.instr.validationRegexp) {
            if (!val.match(_this.instr.validationRegexp)) {
              return false;
            }
          }
          return true;
        }
      });
    }

    return PrefStr;

  })(Pref);

  root.PrefNumber = (function(_super) {

    __extends(PrefNumber, _super);

    function PrefNumber(group, name, instr) {
      var _this = this;
      this.group = group;
      this.name = name;
      this.instr = instr;
      PrefNumber.__super__.constructor.call(this, this.group, this.name, this.instr);
      this.local.push({
        'range': function(val) {
          return _this.isRange(val);
        }
      });
      this.local.push({
        'default': function(val) {
          if (typeof val !== 'number') {
            return false;
          }
          if (!_this.inRange(_this.instr.range, val)) {
            return false;
          }
          return true;
        }
      });
    }

    return PrefNumber;

  })(Pref);

  root.PrefList = (function(_super) {

    __extends(PrefList, _super);

    function PrefList(group, name, instr) {
      var _this = this;
      this.group = group;
      this.name = name;
      this.instr = instr;
      PrefList.__super__.constructor.call(this, this.group, this.name, this.instr);
      this.local.push({
        'data': function(val) {
          if (!_this.isArray(val)) {
            return false;
          }
          return true;
        }
      });
      this.local.push({
        'selectedSize': function(val) {
          if (!_this.isArray(val)) {
            return false;
          }
          if (!_this.isRange(_this.instr.selectedSize)) {
            return false;
          }
          if (!(val[0] <= _this.instr.data.length && val[1] <= _this.instr.data.length && val[0] > 0 && val[1] > 0)) {
            return false;
          }
          return true;
        }
      });
      this.local.push({
        'default': function(val) {
          var idx, _i, _len;
          if (!(_this.isArray(val) && val.length)) {
            return false;
          }
          if (!_this.isArray(_this.instr.data)) {
            return false;
          }
          for (_i = 0, _len = val.length; _i < _len; _i++) {
            idx = val[_i];
            if (__indexOf.call(_this.instr.data, idx) < 0) {
              return false;
            }
          }
          if (!(val.length <= _this.instr.selectedSize[1])) {
            return false;
          }
          return true;
        }
      });
    }

    return PrefList;

  })(Pref);

  root.PrefBool = (function(_super) {

    __extends(PrefBool, _super);

    function PrefBool(group, name, instr) {
      var _this = this;
      this.group = group;
      this.name = name;
      this.instr = instr;
      PrefBool.__super__.constructor.call(this, this.group, this.name, this.instr);
      this.local.push({
        'default': function(val) {
          return _this.isBoolean(val);
        }
      });
    }

    return PrefBool;

  })(Pref);

  root.PrefText = (function(_super) {

    __extends(PrefText, _super);

    function PrefText(group, name, instr) {
      var _this = this;
      this.group = group;
      this.name = name;
      this.instr = instr;
      PrefText.__super__.constructor.call(this, this.group, this.name, this.instr);
      this.local.push({
        'allowEmpty': function(val) {
          return _this.isBoolean(val);
        }
      });
      this.local.push({
        'range': function(val) {
          return _this.isRange(val);
        }
      });
      this.local.push({
        'default': function(val) {
          if (typeof val !== 'string') {
            return false;
          }
          if (val === '') {
            return _this.instr.allowEmpty;
          }
          if (val === '') {
            return false;
          }
          if (!_this.inRange(_this.instr.range, val.length)) {
            return false;
          }
          return true;
        }
      });
    }

    return PrefText;

  })(Pref);

  root.PrefColor = (function(_super) {

    __extends(PrefColor, _super);

    function PrefColor(group, name, instr) {
      this.group = group;
      this.name = name;
      this.instr = instr;
      PrefColor.__super__.constructor.call(this, this.group, this.name, this.instr);
      this.local.push({
        'default': function(val) {
          return val.match(/^#[A-Za-z0-9]{3,6}$/);
        }
      });
    }

    return PrefColor;

  })(Pref);

  root.PrefEmail = (function(_super) {

    __extends(PrefEmail, _super);

    function PrefEmail(group, name, instr) {
      var _this = this;
      this.group = group;
      this.name = name;
      this.instr = instr;
      PrefEmail.__super__.constructor.call(this, this.group, this.name, this.instr);
      this.local.push({
        'allowEmpty': function(val) {
          return _this.isBoolean(val);
        }
      });
      this.local.push({
        'default': function(val) {
          if (typeof val !== 'string') {
            return false;
          }
          if (val === '') {
            return _this.instr.allowEmpty;
          }
          if (!val.match(/^[^ ]+@[^ ]+$/)) {
            return false;
          }
          return true;
        }
      });
    }

    return PrefEmail;

  })(Pref);

  root.PrefDatetime = (function(_super) {

    __extends(PrefDatetime, _super);

    function PrefDatetime(group, name, instr) {
      var _this = this;
      this.group = group;
      this.name = name;
      this.instr = instr;
      PrefDatetime.__super__.constructor.call(this, this.group, this.name, this.instr);
      this.local.push({
        'allowEmpty': function(val) {
          return _this.isBoolean(val);
        }
      });
      this.local.push({
        'range': function(val) {
          return _this.isRange(val);
        }
      });
      this.local.push({
        'default': function(val) {
          var idx, range;
          if (typeof val !== 'string') {
            return false;
          }
          if (val === '') {
            return _this.instr.allowEmpty;
          }
          if (!_this.isDate(val)) {
            return false;
          }
          if (_this.instr.range) {
            range = (function() {
              var _i, _len, _ref, _results;
              _ref = this.instr.range;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                idx = _ref[_i];
                _results.push(this.dateParse(idx));
              }
              return _results;
            }).call(_this);
            if (!_this.inRange(range, _this.dateParse(val))) {
              return false;
            }
          }
          return true;
        }
      });
    }

    PrefDatetime.prototype.isDate = function(t) {
      var d;
      d = new Date(t);
      return d.toISOString().replace(/\.000Z$/, 'Z') === t;
    };

    PrefDatetime.prototype.isRange = function(t) {
      var idx, _i, _len;
      if (!this.isArray(t)) {
        return false;
      }
      if (t.length !== 2) {
        return false;
      }
      for (_i = 0, _len = t.length; _i < _len; _i++) {
        idx = t[_i];
        if (!this.isDate(idx)) {
          return false;
        }
      }
      if (!(this.dateParse(t[0]) <= this.dateParse(t[1]))) {
        return false;
      }
      return true;
    };

    PrefDatetime.prototype.dateParse = function(t) {
      return Date.parse(t);
    };

    return PrefDatetime;

  })(Pref);

  root.PrefDate = (function(_super) {

    __extends(PrefDate, _super);

    function PrefDate(group, name, instr) {
      this.group = group;
      this.name = name;
      this.instr = instr;
      PrefDate.__super__.constructor.call(this, this.group, this.name, this.instr);
    }

    PrefDate.prototype.isDate = function(t) {
      var d;
      d = new Date(t);
      return d.toISOString().replace(/T.+Z$/, '') === t;
    };

    return PrefDate;

  })(root.PrefDatetime);

  root.PrefWeek = (function(_super) {

    __extends(PrefWeek, _super);

    function PrefWeek(group, name, instr) {
      this.group = group;
      this.name = name;
      this.instr = instr;
      PrefWeek.__super__.constructor.call(this, this.group, this.name, this.instr);
    }

    PrefWeek.prototype._dateweek2date = function(t) {
      var dummy, m, w, y, _ref;
      try {
        _ref = t.match(/^([0-9]{4})-W([0-9]{2})$/), dummy = _ref[0], y = _ref[1], w = _ref[2];
      } catch (error) {
        return null;
      }
      y = parseInt(y);
      w = parseInt(w);
      if (!(y && w)) {
        return null;
      }
      if (!this.inRange([1, 48], w)) {
        return null;
      }
      m = Math.ceil(w / 4);
      if (m < 10) {
        m = "0" + m;
      }
      return "" + y + "-" + m + "-01";
    };

    PrefWeek.prototype.dateParse = function(t) {
      return Date.parse(this._dateweek2date(t));
    };

    PrefWeek.prototype.isDate = function(t) {
      return this.dateParse(t);
    };

    return PrefWeek;

  })(root.PrefDatetime);

  root.PrefTime = (function(_super) {

    __extends(PrefTime, _super);

    function PrefTime(group, name, instr) {
      this.group = group;
      this.name = name;
      this.instr = instr;
      PrefTime.__super__.constructor.call(this, this.group, this.name, this.instr);
    }

    PrefTime.prototype._time2date = function(t) {
      var dummy, h, idx, m, s, _i, _len, _ref, _ref1;
      try {
        _ref = t.match(/^([0-9]{2}):([0-9]{2}):([0-9]{2})$/), dummy = _ref[0], h = _ref[1], m = _ref[2], s = _ref[3];
      } catch (error) {
        return null;
      }
      h = parseInt(h);
      m = parseInt(m);
      s = parseInt(s);
      _ref1 = [h, m, s];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        idx = _ref1[_i];
        if (typeof idx !== 'number') {
          return null;
        }
      }
      if (!this.inRange([0, 23], h)) {
        return null;
      }
      if (!this.inRange([0, 59], m)) {
        return null;
      }
      if (!this.inRange([0, 59], s)) {
        return null;
      }
      if (h < 10) {
        h = "0" + h;
      }
      if (m < 10) {
        m = "0" + m;
      }
      if (s < 10) {
        s = "0" + s;
      }
      return "2000-01-01T" + h + ":" + m + ":" + s + "Z";
    };

    PrefTime.prototype.dateParse = function(t) {
      return Date.parse(this._time2date(t));
    };

    PrefTime.prototype.isDate = function(t) {
      return this.dateParse(t);
    };

    return PrefTime;

  })(root.PrefDatetime);

}).call(this);
