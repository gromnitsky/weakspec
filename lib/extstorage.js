// Generated by CoffeeScript 1.3.3
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.ExtStorage = (function() {

    function ExtStorage() {
      this.db = (typeof widget !== "undefined" && widget !== null ? widget.preferences : void 0) || {};
    }

    ExtStorage.prototype.raw = function() {
      return this.db;
    };

    ExtStorage.prototype._getGroup = function(group) {
      var g;
      try {
        g = JSON.parse(this.db[group]);
      } catch (e) {
        return {};
      }
      return g || {};
    };

    ExtStorage.prototype.get = function(group, name) {
      var g;
      g = this._getGroup(group);
      if (g[name] === void 0) {
        return null;
      } else {
        return g[name];
      }
    };

    ExtStorage.prototype.set = function(group, name, value) {
      var g;
      g = this._getGroup(group);
      g[name] = value;
      return this.db[group] = JSON.stringify(g);
    };

    ExtStorage.prototype.clean = function() {
      var k, v, _ref, _results;
      if (typeof widget !== "undefined" && widget !== null) {
        return this.db.clear();
      } else {
        _ref = this.db;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push(delete this.db[k]);
        }
        return _results;
      }
    };

    ExtStorage.prototype.size = function() {
      return (Object.keys(this.db)).length;
    };

    ExtStorage.Get = function(group, name) {
      return (new root.ExtStorage()).get(group, name);
    };

    ExtStorage.Set = function(group, name, value) {
      return (new root.ExtStorage()).set(group, name, value);
    };

    return ExtStorage;

  })();

}).call(this);
