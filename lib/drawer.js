// Generated by CoffeeScript 1.3.3
(function() {
  var dg, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  dg = (typeof require === "function" ? require('./domgenerator') : void 0) || root;

  root.Drawer = (function() {

    function Drawer(spec) {
      this.spec = spec;
      if (!(this.spec && this.size() >= 1)) {
        throw new Error('no valid spec');
      }
      this.DG = dg.DomGenerator;
    }

    Drawer.prototype.size = function() {
      return (Object.keys(this.spec)).length;
    };

    Drawer.prototype.tree = function() {
      var form, group, grp, nodes, o, opts, _ref;
      nodes = [];
      _ref = this.spec;
      for (group in _ref) {
        opts = _ref[group];
        o = this;
        grp = this.DG.n(null, 'fieldset');
        form = this.DG.n(grp, 'form', {}, function() {
          this.d.n(this, 'legend', null, function() {
            return this.d.t(this, group);
          });
          this.d.n(this, 'table', null, function() {
            var instr, name, _results;
            _results = [];
            for (name in opts) {
              instr = opts[name];
              _results.push(o.generatePref(this, group, name, instr));
            }
            return _results;
          });
          return this.d.n(this, 'div', null, function() {
            this.d.n(this, 'input', {
              'type': 'reset'
            });
            this.d.t(this, ' ');
            return this.d.n(this, 'input', {
              'type': 'submit',
              'value': 'Save'
            });
          });
        });
        nodes.push(grp.node);
      }
      return nodes;
    };

    Drawer.prototype.uid = function(group, name, type) {
      if (type === 'bHelp' || type === 'bDefault') {
        return [group, name, type].join('|');
      }
      return [group, name, "p" + type].join('|');
    };

    Drawer.prototype._mapping = function(type) {
      return {
        'string': this.pString,
        'number': this.pNumber,
        'list': this.pList,
        'bool': this.pBool,
        'text': this.pText,
        'color': this.pColor,
        'email': this.pEmail,
        'datetime': this.pDatetime,
        'date': this.pDate,
        'week': this.pWeek,
        'time': this.pTime
      }[type] || (function() {
        throw new Error("invalid type '" + type + "'");
      })();
    };

    Drawer.prototype.generatePref = function(parentDomGen, group, name, instr) {
      var o;
      try {
        this._mapping(instr.type);
      } catch (e) {
        throw new Error("cannot draw '" + instr.type + "': " + e.message);
      }
      o = this;
      return this.DG.n(parentDomGen, 'tr', null, function() {
        this.d.n(this, 'th', null, function() {
          return this.d.t(this, instr.desc);
        });
        this.d.n(this, 'td', null, function() {
          return o._mapping(instr.type).call(o, this, group, name, instr);
        });
        return this.d.n(this, 'td', null, function() {
          this.d.n(this, 'button', {
            'type': 'button',
            "class": "bDefault",
            "id": o.uid(group, name, "bDefault")
          }, function() {
            return this.d.t(this, 'Default');
          });
          this.d.t(this, ' ');
          return this.d.n(this, 'a', {
            "href": "#",
            "class": "bHelp",
            "id": o.uid(group, name, "bHelp")
          }, function() {
            return this.d.t(this, "?");
          });
        });
      });
    };

    Drawer.prototype.pString = function(parentDomGen, group, name, instr) {
      var attr;
      attr = {
        "class": "pref",
        "id": this.uid(group, name, "string")
      };
      if (instr.validationRegexp) {
        attr['pattern'] = instr.validationRegexp;
      }
      if (!instr.allowEmpty) {
        attr['required'] = "";
      }
      return this.DG.n(parentDomGen, 'input', attr);
    };

    Drawer.prototype.pNumber = function(parentDomGen, group, name, instr) {
      var attr;
      attr = {
        "class": "pref",
        "id": this.uid(group, name, "number"),
        "required": "",
        "type": "number"
      };
      if (instr.range) {
        attr['min'] = instr.range[0];
      }
      if (instr.range) {
        attr['max'] = instr.range[1];
      }
      return this.DG.n(parentDomGen, 'input', attr);
    };

    Drawer.prototype.pList = function(parentDomGen, group, name, instr) {
      var attr;
      attr = {
        "class": "pref",
        "id": this.uid(group, name, "list"),
        "required": ""
      };
      if (!(instr.selectedSize[0] === 1 && instr.selectedSize[1] === 1)) {
        attr["multiple"] = "multiple";
      }
      return this.DG.n(parentDomGen, 'select', attr, function() {
        var idx, _i, _len, _ref, _results;
        _ref = instr.data;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          idx = _ref[_i];
          _results.push(this.d.n(this, 'option', {
            'value': idx
          }, function() {
            return this.d.t(this, idx);
          }));
        }
        return _results;
      });
    };

    Drawer.prototype.pBool = function(parentDomGen, group, name, instr) {
      var attr;
      attr = {
        "class": "pref",
        "id": this.uid(group, name, "bool"),
        "type": "checkbox"
      };
      return this.DG.n(parentDomGen, 'input', attr);
    };

    Drawer.prototype.pText = function(parentDomGen, group, name, instr) {
      var attr;
      attr = {
        "class": "pref",
        "id": this.uid(group, name, "text"),
        "cols": "30",
        "rows": 4
      };
      if (!instr.allowEmpty) {
        attr['required'] = "";
      }
      if (instr.range) {
        attr['maxlength'] = instr.range[1];
      }
      return this.DG.n(parentDomGen, 'textarea', attr);
    };

    Drawer.prototype.pColor = function(parentDomGen, group, name, instr) {
      var attr;
      attr = {
        "class": "pref",
        "id": this.uid(group, name, "color"),
        "type": "color"
      };
      return this.DG.n(parentDomGen, 'input', attr);
    };

    Drawer.prototype.pEmail = function(parentDomGen, group, name, instr) {
      var attr;
      attr = {
        "class": "pref",
        "id": this.uid(group, name, "email"),
        "type": "email"
      };
      if (!instr.allowEmpty) {
        attr['required'] = "";
      }
      return this.DG.n(parentDomGen, 'input', attr);
    };

    Drawer.prototype.pAbstractDate = function(type, parentDomGen, group, name, instr) {
      var attr, _ref;
      attr = {
        "class": "pref",
        "id": this.uid(group, name, type),
        "type": type
      };
      if (!instr.allowEmpty) {
        attr['required'] = "";
      }
      if (instr.range) {
        _ref = instr.range, attr['min'] = _ref[0], attr['max'] = _ref[1];
      }
      return this.DG.n(parentDomGen, 'input', attr);
    };

    Drawer.prototype.pDatetime = function(parentDomGen, group, name, instr) {
      return this.pAbstractDate('datetime', parentDomGen, group, name, instr);
    };

    Drawer.prototype.pDate = function(parentDomGen, group, name, instr) {
      return this.pAbstractDate('date', parentDomGen, group, name, instr);
    };

    Drawer.prototype.pWeek = function(parentDomGen, group, name, instr) {
      return this.pAbstractDate('week', parentDomGen, group, name, instr);
    };

    Drawer.prototype.pTime = function(parentDomGen, group, name, instr) {
      return this.pAbstractDate('time', parentDomGen, group, name, instr);
    };

    return Drawer;

  })();

}).call(this);
